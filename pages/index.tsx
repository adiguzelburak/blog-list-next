import Head from 'next/head';
import Link from 'next/link';
import { ChangeEvent, useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { postActions } from '../redux/posts/postsSlice';
import { PostInfoType, PostType, SelectorType } from '../utilities/types';
import { faker } from '@faker-js/faker';
import Image from 'next/image';
import classNames from '../helpers/classNames';

type Props = {
  postInfo: PostInfoType;
}

export default function Home({ postInfo }: Props) {
  const dispatch = useDispatch();
  const [isSearched, setIsSearched] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [searchedTitle, setSearchedTitle] = useState('')
  const posts = useSelector<SelectorType, PostType[]>(state => state.post.posts)
  const searched = useSelector<SelectorType, PostInfoType | null>(state => state.post.searchedPosts)

  useEffect(() => {
    dispatch(postActions.setPostList(postInfo.posts))
  }, [])

  const searchPost = (postTitle: string) => {
    dispatch(postActions.getPostsBySearchedRequest(postTitle))
  }

  useEffect(() => {
    if (searchedTitle !== "") {
      setIsSearched(true)
    } else {
      setIsSearched(false);

    }
  }, [searchedTitle])

  useEffect(() => {
    if (isLoading) {
      setIsLoading(false);
    }
    if (!isSearched) {
      setIsLoading(false);
    }
  }, [searched, isSearched])


  const onChange = (e: ChangeEvent<HTMLInputElement>) => {
    searchPost(e.target.value)
    setSearchedTitle(e.target.value)
    setIsLoading(true);
  }

  const summary = (text: string) => {
    const sliceText = text.slice(0, 50);
    const summaryText = sliceText + (text.length > 50 ? "..." : "");

    return summaryText;
  };

  const generateFakerImage = () => {
    const randomImage = faker.image.urlPicsumPhotos();

    return randomImage;
  };

  const showLoading = () => {
    setIsLoading(true);
  }

  return (
    <>
      <Head>
        <title>Burak Blog List</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <div className="relative pt-16 pb-20 px-4 sm:px-6 lg:pt-24 lg:pb-28 lg:px-8">
          <div className="absolute inset-0">
            <div className="bg-white h-1/3 sm:h-2/3" />
          </div>
          <div className="relative max-w-7xl mx-auto">
            <div className="text-center">
              <h2 className="text-3xl tracking-tight font-extrabold text-gray-900 sm:text-4xl">Blog List</h2>
              <p className="mt-3 max-w-2xl mx-auto text-xl text-gray-500 sm:mt-4">
                Welcome to my Blog List
              </p>
              <div>
                <div className="mt-6 relative rounded-md shadow-sm">
                  <input
                    type="text"
                    name="post-title"
                    id="post-title"
                    onChange={onChange}
                    className="outline-none block w-full pl-10 pr-10 sm:text-sm border-gray-300 placeholder:italic"
                    placeholder="Search Post Title..."
                  />
                  <div className="absolute inset-y-0 left-0 pr-3 flex items-center pointer-events-none">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="h-5 w-5 text-gray-400">
                      <path strokeLinecap="round" strokeLinejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                    </svg>
                  </div>
                </div>
              </div>
              {isLoading &&
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-20 h-20 animate-spin mx-auto mt-3">
                  <path strokeLinecap="round" strokeLinejoin="round" d="M16.023 9.348h4.992v-.001M2.985 19.644v-4.992m0 0h4.992m-4.993 0l3.181 3.183a8.25 8.25 0 0013.803-3.7M4.031 9.865a8.25 8.25 0 0113.803-3.7l3.181 3.182m0-4.991v4.99" />
                </svg>}

            </div>
            <div className="mt-10 max-w-lg mx-auto grid gap-5 lg:grid-cols-3 lg:max-w-none">
              {isSearched
                ? <>
                  {searched?.posts?.map(((post) =>
                    <Link onClick={() => showLoading()} href={`/posts/${post.id}`} key={post.id} className="flex flex-col rounded-lg shadow-lg overflow-hidden">
                      <div className="flex-shrink-0">
                        <Image width={640} height={480} placeholder='blur' blurDataURL={generateFakerImage()} className="h-48 w-full object-cover" src={generateFakerImage()} alt={post.title} />
                      </div>
                      <div className="flex-1 bg-white p-6 flex flex-col justify-between">
                        <div className="flex-1">
                          <div className="block mt-2">
                            <p className="text-xl font-semibold text-gray-900">{post.title}</p>
                            <p className="mt-3 text-base text-gray-500">{summary(post.body)}</p>
                          </div>
                        </div>
                      </div>
                    </Link>))}</>
                : <>
                  {posts.map(((post) =>
                    <Link onClick={() => showLoading()} href={`/posts/${post.id}`} key={post.id} className="flex flex-col rounded-lg shadow-lg overflow-hidden">
                      <div className="flex-shrink-0">
                        <Image width={640} height={480} placeholder='blur' blurDataURL={generateFakerImage()} className="h-48 w-full object-cover" src={generateFakerImage()} alt={post.title} />
                      </div>
                      <div className="flex-1 bg-white p-6 flex flex-col justify-between">
                        <div className="flex-1">
                          <div className="block mt-2">
                            <p className={classNames(post.isSeen ? "text-blue-800 underline" : "text-gray-900", "text-xl font-semibold")}>{post.title}</p>
                            <p className="mt-3 text-base text-gray-500">{summary(post.body)}</p>
                          </div>
                        </div>
                      </div>
                    </Link>))}</>}
            </div>
          </div>
        </div>
      </div >
    </>
  )
}


export async function getServerSideProps() {
  const responseDetail = await fetch('https://dummyjson.com/posts');
  const postInfo = await responseDetail.json();

  return {
    props: {
      postInfo,
    },
  };
}